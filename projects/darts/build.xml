<?xml version="1.0" encoding="UTF-8"?>

<project name="darts" default="build.Darts.me">

    <!-- Sets the DSTAMP, TSTAMP and TODAY properties -->
    <tstamp/>

    <!-- Load our configuration -->
    <property file="./darts.prop" />

    <target name="build.Darts.me" description="build project">
        <property file="../env.prop"/>
        <property name="dst" value="../darts/build"/>
        <exec
            command="${PHPBIN} -q  ../preprocessor/build/preprocessor.php /Ddst=${dst} /Denv_common=${common} /Dtarget_host=darts.me  /Dtarget=debug config.xml"
            checkreturn="true"
            logoutput="true"/>

        <jsMin targetDir="build/js"
                failOnError="false"
                suffix=".min"
        >
            <fileset dir="build/js">
                <include name="site.js"/>
            </fileset>
        </jsMin>
    </target>

    <target name="build.localhost" description="build project">
            <exec
            command="build.bat localhost z:/home/localhost/www/darts"
            checkreturn="true"
            logoutput="true"/>
        <jsMin targetDir="z:/home/localhost/www/darts/js"
                failOnError="false"
                suffix=".min"
            >
            <fileset dir="z:/home/localhost/www/darts/js">
                <include name="site.js"/>
            </fileset>
        </jsMin>
    </target>
    
<!-- create our migration task -->
    <target name="migrate" description="Database Migrations">

        <!-- load the dbdeploy task -->
        <taskdef name="dbdeploy" classname="phing.tasks.ext.dbdeploy.DbDeployTask"/>

        <!-- these two filenames will contain the generated SQL to do the deploy and roll it back-->
        <property name="build.dbdeploy.deployfile" value="deploy/scripts/deploy-${DSTAMP}${TSTAMP}.sql" />
        <property name="build.dbdeploy.undofile" value="deploy/scripts/undo-${DSTAMP}${TSTAMP}.sql" />
        <property name="build.dir" value="db" />
        <property name="progs.mysql" value="z:\usr\local\mysql-5.1\bin\mysql.exe"/>
        <mkdir dir="${build.dir}/deltas" />
        <mkdir dir="${build.dir}/deploy/scripts/" />
                        <!-- generate the deployment scripts -->
        <dbdeploy
            url="mysql:host=${debug.db.host};dbname=${debug.db.name}"
            userid="${debug.db.user}"
            password="${debug.db.pass}"
            dir="${build.dir}/deltas"
            outputfile="${build.dir}/${build.dbdeploy.deployfile}"
            undooutputfile="${build.dir}/${build.dbdeploy.undofile}" />

        <!--  -p${db.pass} execute the SQL - Use mysql command line to avoid trouble with large files or many statements and PDO -->
        <exec
            command="${progs.mysql} -h${db.host} -u${db.user} ${db.name} &lt; ${build.dbdeploy.deployfile}"
            dir="${build.dir}"
            checkreturn="true" />
    </target>

    <!-- ============================================  -->
    <!-- Target: prepare                               -->
    <!-- ============================================  -->
    <target name="prepare">
        <echo msg="Making directory ./build" />
        <mkdir dir="./build" />
    </target>
    <target name="svn.revision">
        <svnlastrevision
   svnpath="c:\Program Files\TortoiseSVN\bin\svn.exe"
   workingcopy="."
   forceCompatible="yes"
   propertyname="svn.lastrevision"/>
        <echo msg="last revision - ${svn.lastrevision}"/>
    </target>

    <target name="revision">
        <echo file="rev.tmp" append="false"><![CDATA[
SVN(r $WCREV$) $WCURL$
]]>        </echo>
         <exec executable="SubWCRev" dir="." output="svn.lastrevision">
          <arg file="." />
             <arg file="rev.tmp" />
             <arg file="rev.tmp" />
             <arg value="-f" />
          </exec>
        <loadfile property="svn.lastrevision" file="rev.tmp"/>

        <echo msg="revision=${svn.lastrevision}"/>
    </target>
    
    <target name="set.last">
        <copy file="darts.prop" tofile="_darts.prop" overwrite="yes">

        <filterchain>
          <replaceregexp>
          <!--  <regexp modifiers='e' pattern="(ftp.lasttime=)([^\n\r]+)" replace="'$1'.date('cP-3:00')"/>-->
          <regexp modifiers='e' pattern="(ftp.lasttime=)([^\n\r]+)" replace="'$1'.strftime('%c')"/>
          </replaceregexp>
        </filterchain>

        </copy>
        <copy file="_darts.prop" tofile="darts.prop" overwrite="yes"/>
        <delete file="_darts.prop" />
    </target>
    
<target name="zip" depends="build.Darts.me">
    <echo msg="zipping into deploy.zip" />
    <delete file="deploy.zip" />
    <zip destfile="deploy.zip" includeemptydirs="false">
        <fileset dir="d:/projects/darts/build">
            <include name="**" />
            <exclude name="engine/hosts.php" />
            <date datetime="${ftp.lasttime}" when="after"/>
        </fileset>
    </zip>
</target>

<target name="deploy" depends="build.Darts.me">
    <echo msg="deploing to ${ftp.host} ${ftp.user}" />
    <ftpdeploy host="${ftp.host}"
           username="${ftp.user}"
           password="${ftp.password}"
                dir="${ftp.dir}"
    >
        <fileset dir="d:/projects/darts/build">
            <include name="**" />
            <exclude name="engine/hosts.php" />
            <date datetime="${ftp.lasttime}" when="after"/>
        </fileset>
    </ftpdeploy>
</target>  
<!-- //skip -->  
</project>